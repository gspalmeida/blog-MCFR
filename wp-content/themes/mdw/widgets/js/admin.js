//jQuery(document).ready(function(){

function datePicker() {
    var datePicker = jQuery( ".datePicker" );
    var monthSelect = datePicker.children( ".monthSelect" );
    var daySelect = datePicker.children( ".daySelect" );
    var yearSelect = datePicker.children( ".yearSelect" );
    var seconds = datePicker.children( 'input[type="number"]' );
    var short = [ 2, 4, 6, 9, 11 ]; // numbers of short months
    function isLeapYear( year ) {
        return ( ( year % 4 == 0 && year % 100 != 0 ) || ( year % 400 == 0 ) ) ? true : false;
    }
    monthSelect.on( "change", function ( e ) { // hides days for shorter months on selection
        if ( short.indexOf( parseInt( jQuery( this ).val() ) ) !== -1 ) { // is shorter?
            daySelect.children( 'option[data-day*="31"]' ).hide();
            if ( jQuery( this ).val() == 2 ) { // is february?
                daySelect.children( 'option[data-day*="30"]' ).hide();
                if ( !isLeapYear( parseInt( daySelect.data( 'year' ) ) ) ) { // is NOT leap year
                    daySelect.children( 'option[data-day*="29"]' ).hide();
                }
            }
        } else { // shows all days
            daySelect.children( 'option' ).each( function ( i, e ) {
                jQuery( this ).show();
            } );
        }
    } );

}
datePicker();
/*
 * Makes sidebars sticky when thumb-tack icon is clicked
 */
function fixSidebars() {

    var sidebars = jQuery( "#widgets-right .widgets-holder-wrap" );
    var sidebarsContainer = jQuery( "#widgets-right" );
    var widthOriginal = "" + sidebarsContainer.width();
    var pinnedColor = "#0d47a1"; // mdb primary-color
    var unpinnedColor = "#4285F4"; // mdb primary-color-dark
    sidebars.each( function ( i, e ) {
        var header = jQuery( e ).find( ".sidebar-name h2" );
        if ( header.find( ".MDW-pin-for-fixed-sidebars-span" ).length == 0 )
            header.append( "<div class='MDW-pin-for-fixed-sidebars-span ' style='display:inline-block;float:right;margin-right:3.2rem'>\
                                        <i style='font-size:0.8em;color:red;margin-right:20px;' class='fa fa-trash delete-sidebar'></i>\
                                        <i style='font-size:0.8em;' class='fa fa-thumb-tack pin'></i>\
                                     </div>" );

        jQuery( e ).data( "index", i ); // used on pins cliks to make sure which one was clciked and to clear others (only one fixed at the time)
    } );
    var pins = jQuery( '.MDW-pin-for-fixed-sidebars-span .pin' ); // selects all thumb-thack's
    pins.css( "color", unpinnedColor ); // colors all thumb-thacks as unpinned

    pins.on( 'click', function ( e ) {
        var currentSidebar = jQuery( this ).parentsUntil( ".widgets-holder-wrap" ).last().parent();
        var index = currentSidebar.data( "index" );

        // clears all sticky sidebars except clicked one.
        jQuery( sidebars ).each( function ( i, e ) {
            if ( jQuery( this ).data( "index" ) != index ) {
                jQuery( this ).removeClass( "stickySidebar" );
                jQuery( this ).find( ".MDW-pin-for-fixed-sidebars-span .pin" ).css( "color", unpinnedColor );
            }
        } );
        // toggle thumb-thack's color
        if ( currentSidebar.hasClass( "stickySidebar" ) ) {
            currentSidebar.find( ".MDW-pin-for-fixed-sidebars-span .pin" ).css( "color", unpinnedColor );
        } else {
            currentSidebar.find( ".MDW-pin-for-fixed-sidebars-span .pin" ).css( "color", pinnedColor );
            currentSidebar.css( {
                width: widthOriginal
            } );
        }

        // adds sticky to the clicked one
        currentSidebar.toggleClass( "stickySidebar" );
    } );

}

/* ###########################
 *  WIDGET INPUTS DEFINITIONS
 * ###########################
 */

/* Creates name input field.
 
 Args:
 - name        - name of widget generated by WP. Has to be unique for each widget
 - fieldNumber - suffix added to each field. Has to be increased for each field to make it unique
 - slider      - container you want to put the field in
 - cols        - number of columns you want the input to take. The number has to add up to 12
 */
function text_input( options ) { //name, fieldNumber, slider, cols, placeholder

    var customClass = ( ' ' + options.customClass ) || '';

    var widget_input = document.createElement( "div" );
    widget_input.setAttribute( "class", "widget-input col-md-" + options.cols );



    if ( typeof ( options.field_name ) == 'undefined' ) {
        var field_name = "name"
    } else {
        var field_name = options.field_name
    }

    var text_input = document.createElement( "input" );

    text_input.setAttribute( "class", "title_text" + customClass );
    text_input.setAttribute( "id", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    text_input.setAttribute( "name", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    ( typeof options.placeholder == "undefined" ) ? text_input.setAttribute( "placeholder", "Name " + options.fieldNumber ) : text_input.setAttribute( "placeholder", options.placeholder );

    text_input.setAttribute( "type", "text" );

    var br = document.createElement( "br" );

    widget_input.appendChild( text_input );
    widget_input.appendChild( br );

    options.slider.appendChild( widget_input );
}
/* Creates url input field.
 
 Args:
 - name        - name of widget generated by WP. Has to be unique for each widget
 - fieldNumber - suffix added to each field. Has to be increased for each field to make it unique
 - slider      - container you want to put the field in
 - cols        - number of columns you want the input to take. The number has to add up to 12
 */
/* Creates image input field.
 
 Args:
 - id          - id of widget generated by WP. Has to be unique for each widget
 - name        - name of widget generated by WP. Has to be unique for each widget
 - fieldNumber - suffix added to each field. Has to be increased for each field to make it unique
 - slider      - container you want to put the field in
 - cols        - number of columns you want the input to take. The number has to add up to 12
 */
function image_input( options ) { //id, name, fieldNumber, slider, cols
    var widget_input = document.createElement( "div" );
    widget_input.setAttribute( "class", "widget-input col-md-" + options.cols );

    var image_preview = document.createElement( "div" );
    image_preview.setAttribute( "id", options.id + "_preview" );
    image_preview.setAttribute( "class", "preview_placeholder col-md-8" );

    var img_preview = document.createElement( "img" );
    img_preview.setAttribute( "src", "" );
    img_preview.setAttribute( "class", "img-fluid" );
    img_preview.setAttribute( "style", "height: 250px; width: 250px;" )

    image_preview.appendChild( img_preview );

    if ( typeof ( options.field_name ) == 'undefined' ) {
        var field_name = "image"
    } else {
        var field_name = options.field_name
    }
    if ( typeof ( options.button_name ) == 'undefined' ) {
        var button_name = "Select Image"
    } else {
        var button_name = options.button_name
    }


    var image_input = document.createElement( "input" );
    image_input.setAttribute( "class", "background_image" );
    image_input.setAttribute( "id", options.id + "" + field_name + "_" + options.fieldNumber );
    image_input.setAttribute( "name", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    image_input.setAttribute( "value", "" );
    image_input.setAttribute( "type", "text" );

    var image_button = document.createElement( "button" );
    image_button.setAttribute( "id", "image_button" );
    image_button.setAttribute( "class", "button" );
    image_button.setAttribute( "onclick", "image_button_click('Choose Image', 'Select Image', 'image', '" + options.id + "_preview', '" + options.id + "" + field_name + "_" + options.fieldNumber + "');" );

    var buttonText = document.createTextNode( button_name );
    image_button.appendChild( buttonText );

    var br = document.createElement( "br" );

    widget_input.appendChild( image_preview );
    widget_input.appendChild( image_input );
    widget_input.appendChild( image_button );
    widget_input.appendChild( br );

    options.slider.appendChild( widget_input );
}

/* Creates content input field.
 
 Args:
 - name        - name of widget generated by WP. Has to be unique for each widget
 - fieldNumber - suffix added to each field. Has to be increased for each field to make it unique
 - slider      - container you want to put the field in
 - cols        - number of columns you want the input to take. The number has to add up to 12
 */
function content_input( options ) { //name, fieldNumber, slider, cols
    var widget_input = document.createElement( "div" );
    widget_input.setAttribute( "class", "widget-input col-md-" + options.cols );

    if ( typeof ( options.field_name ) == 'undefined' ) {
        var field_name = "content"
    } else {
        var field_name = options.field_name
    }

    var content_input = document.createElement( "textarea" );
    content_input.setAttribute( "class", "title_text" );
    content_input.setAttribute( "id", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    content_input.setAttribute( "name", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    ( typeof options.placeholder == "undefined" ) ? content_input.setAttribute( "placeholder", "Name " + options.fieldNumber ) : content_input.setAttribute( "placeholder", options.placeholder );

    var br = document.createElement( "br" );

    widget_input.appendChild( content_input );
    widget_input.appendChild( br );

    options.slider.appendChild( widget_input );
}
/* Creates image input field.
 
 Args:
 - fieldNumber - suffix added to each field. Has to be increased for each field to make it unique
 - name        - name of widget generated by WP. Has to be unique for each widget
 - slider      - container you want to put the field in
 - cols        - number of columns you want the input to take. The number has to add up to 12
 */
function icon_input( options ) { //fieldNumber, name, slider, cols
    var widget_input = document.createElement( "div" );
    widget_input.setAttribute( "class", "widget-input col-md-" + options.cols );

    if ( typeof ( options.field_name ) == 'undefined' ) {
        var field_name = "icon"
    } else {
        var field_name = options.field_name
    }

    var close_icon_span = document.createElement( "span" );
    var close_icon = document.createElement( "i" );
    close_icon.setAttribute( "id", "icon_modal_toggle" );
    close_icon.setAttribute( "class", "fa fa-plus blue-text" );

    close_icon_span.appendChild( close_icon );
    widget_input.appendChild( close_icon_span );

    var icon_span = document.createElement( "span" );
    icon_span.setAttribute( "class", "title_text icon_container" );
    icon_span.setAttribute( "id", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    icon_span.setAttribute( "name", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );

    var icon = document.createElement( "i" );
    icon.setAttribute( "class", "chosen fa-4x" ); //default
    icon.setAttribute( "style", "color: #607d8b" );

    icon_span.appendChild( icon );
    widget_input.appendChild( icon_span );

    var br = document.createElement( "br" );

    widget_input.appendChild( br );

    var icon_input = document.createElement( "input" );
    icon_input.setAttribute( "hidden", "hidden" );
    icon_input.setAttribute( "name", options.name + "[icon_container_" + options.fieldNumber + "]" );
    icon_input.setAttribute( "value", "" );
    icon_input.setAttribute( "type", "text" );

    var color_input = document.createElement( "input" );
    color_input.setAttribute( "type", "color" );
    color_input.setAttribute( "id", options.name + "[icon_color_" + options.fieldNumber + "]" );

    var color_code_input = document.createElement( "input" );
    color_code_input.setAttribute( "hidden", "hidden" );
    color_code_input.setAttribute( "type", "text" );
    color_code_input.setAttribute( "id", "color-code" );
    color_code_input.setAttribute( "name", options.name + "[icon_color_" + options.fieldNumber + "]" );
    color_code_input.setAttribute( "value", "#607d8b" );

    if ( options.icon_url == true ) {

        var icon_url_input = document.createElement( "input" );
        icon_url_input.setAttribute( "id", options.name + "[icon_url_" + options.fieldNumber + "]" );
        icon_url_input.setAttribute( "name", options.name + "[icon_url_" + options.fieldNumber + "]" );
        icon_url_input.setAttribute( "placeholder", "Icon url " + options.fieldNumber );
        icon_url_input.setAttribute( "type", "text" );
    }


    widget_input.appendChild( icon_input );
    widget_input.appendChild( color_input );
    widget_input.appendChild( color_code_input );

    if ( options.icon_url == true ) {

        widget_input.appendChild( icon_url_input )
    }

    options.slider.appendChild( widget_input );
}
/* Creates quote input field.
 
 Args:
 - name        - name of widget generated by WP. Has to be unique for each widget
 - i           - suffix added to each field. Has to be increased for each field to make it unique
 - slider      - container you want to put the field in
 - cols        - number of columns you want the input to take. The number has to add up to 12
 */
function quote_input( options ) { //name, i, slider, cols
    var widget_input = document.createElement( "div" );
    widget_input.setAttribute( "class", "widget-input col-md-" + options.cols );

    if ( typeof ( options.field_name ) == 'undefined' ) {
        var field_name = "quote"
    } else {
        var field_name = options.field_name
    }

    var quote_input = document.createElement( "textarea" );
    quote_input.setAttribute( "class", "title_text" );
    quote_input.setAttribute( "id", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    quote_input.setAttribute( "name", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    ( typeof options.placeholder == "undefined" ) ? quote_input.setAttribute( "placeholder", "Name " + options.fieldNumber ) : quote_input.setAttribute( "placeholder", options.placeholder );

    var br = document.createElement( "br" );

    widget_input.appendChild( quote_input );
    widget_input.appendChild( br );

    options.slider.appendChild( widget_input );
}
/* Creates avatar input field.
 
 Args:
 - id          - id of widget generated by WP. Has to be unique for each widget
 - name        - name of widget generated by WP. Has to be unique for each widget
 - fieldNumber - suffix added to each field. Has to be increased for each field to make it unique
 - slider      - container you want to put the field in
 - cols        - number of columns you want the input to take. The number has to add up to 12
 */
function rate_input( options ) {
    var widget_input = document.createElement( "div" );
    widget_input.setAttribute( "class", "widget-input col-md-" + options.cols );

    if ( typeof ( options.field_name ) == 'undefined' ) {
        var field_name = "rate"
    } else {
        var field_name = options.field_name
    }

    var rate_select = document.createElement( "select" );
    rate_select.setAttribute( "style", "display:block" );
    rate_select.setAttribute( "id", options.id + "[" + field_name + "_" + options.fieldNumber + "]" );
    rate_select.setAttribute( "name", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );

    for ( var j = 0; j < 11; j++ ) {
        var rate_option = document.createElement( "option" );
        rate_option.setAttribute( "value", j / 2 );

        var optionText = document.createTextNode( "" + j / 2 );
        rate_option.appendChild( optionText );

        rate_select.appendChild( rate_option );
    }

    widget_input.appendChild( rate_select );

    options.slider.appendChild( widget_input );
}
/* Creates number input field.
 
 Args:
 - name        - name of widget generated by WP. Has to be unique for each widget
 - label       - field name suffix. This is the key name in $instance array
 - fieldNumber - suffix added to each field. Has to be increased for each field to make it unique
 - slider      - container you want to put the field in
 - cols        - number of columns you want the input to take. The number has to add up to 12
 */
function number_input( options ) { //name, label, fieldNumber, slider, cols
    var widget_input = document.createElement( "div" );
    widget_input.setAttribute( "class", "widget-input col-md-" + options.cols );

    var number_input = document.createElement( "input" );

    if ( typeof ( options.field_name ) == 'undefined' ) {
        var field_name = "number"
    } else {
        var field_name = options.field_name
    }

    number_input.setAttribute( "class", "title_text" );
    number_input.setAttribute( "id", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    number_input.setAttribute( "name", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    number_input.setAttribute( "placeholder", field_name[0].toUpperCase() + field_name.substring( 1 ) + " " + options.fieldNumber );
    number_input.setAttribute( "type", "number" );

    var br = document.createElement( "br" );

    widget_input.appendChild( number_input );
    widget_input.appendChild( br );

    options.slider.appendChild( widget_input );
}
/* Creates background color input field.
 
 Args:
 - name        - name of widget generated by WP. Has to be unique for each widget
 - fieldNumber - suffix added to each field. Has to be increased for each field to make it unique
 - slider      - container you want to put the field in
 - cols        - number of columns you want the input to take. The number has to add up to 12
 */
function background_color_input( options ) {


    var widget_input = document.createElement( "div" );
    widget_input.setAttribute( "class", "widget-input col-md-" + options.cols );


    var color_code = document.createElement( "input" );

    if ( typeof ( options.field_name ) == 'undefined' ) {
        var field_name = "color"
    } else {
        var field_name = options.field_name
    }

    color_code.setAttribute( "hidden", "hidden" );
    color_code.setAttribute( "id", "color-code" );
    color_code.setAttribute( "name", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    color_code.setAttribute( "type", "text" );

    var color_input = document.createElement( "input" );

    color_input.setAttribute( "id", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    color_input.setAttribute( "name", options.name + "[" + field_name + "_" + options.fieldNumber + "]" );
    color_input.setAttribute( "type", "color" );

    widget_input.appendChild( color_code );
    widget_input.appendChild( color_input );

    options.slider.appendChild( widget_input );
}

/* ######################
 *  ADDING CUSTOM FIELDS
 * ######################
 */
function addSocialIcon() {
    jQuery( "body" ).on( 'click', "span[id*='add-social']", function () {
       
        /* General variables */
        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );
        //Full id is id (e.x. widget-mdb_team-2) + suffix (e.x. -fieldCount)
        var fullId = jQuery( this ).attr( "id" );
        var id = fullId.slice( fullId.indexOf( "widget" ), -1 * ( fullId.length - fullId.lastIndexOf( "-" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + fullName + "'] > h4" ).length + 1;

        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );

        var toggler = document.createElement( "h4" );
        toggler.setAttribute( "id", "toggler" );
        toggler.setAttribute( "class", "col-md-12" );
        toggler.setAttribute( "onclick", "jQuery(this).next().stop().slideToggle();" );

        var togglerText = document.createTextNode( "Icon " + fieldNumber );
        toggler.appendChild( togglerText );

        var trash = document.createElement( "i" );
        trash.setAttribute( "class", "fa fa-trash red-text delete-the-feature pull-right" );
        trash.setAttribute( "name", name + "[delete_the_feature]" );
        toggler.appendChild( trash );

        var caret = document.createElement( "i" );
        caret.setAttribute( "class", "pull-right fa fa-caret-down" );
        toggler.appendChild( caret );

        // Container of input group
        var slider = document.createElement( "div" );
        slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
        slider.setAttribute( "class", "row" );
        slider.setAttribute( "style", "display:none;" );

        var icon_options = {
            fieldNumber: fieldNumber,
            name: name,
            slider: slider,
            cols: 6,
        }
        var text_options = {
            name: name,
            fieldNumber: fieldNumber,
            field_name: 'icon_url',
            slider: slider,
            cols: 6,
            placeholder: 'Icon url'
        }

        icon_input( icon_options );
        text_input( text_options ) //name, fieldNumber, slider, cols, placeholder


        // Append group inputs to result container
        result.append( toggler );
        result.append( slider );

        // Increase field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );
    } );
}

function addSlide() {
    jQuery( "body" ).on( 'click', "span[id*='add-slide']", function () {

        /* General variables */
        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );
        //Full id is id (e.x. widget-mdb_team-2) + suffix (e.x. -fieldCount)
        var fullId = jQuery( this ).attr( "id" );
        var id = fullId.slice( fullId.indexOf( "widget" ), -1 * ( fullId.length - fullId.lastIndexOf( "-" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + fullName + "'] > h4" ).length + 1;

        var helper = jQuery( "[id='" + fullName + "'] > div" ).length + 1;

        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );

        var toggler = document.createElement( "h4" );
        toggler.setAttribute( "id", "toggler" );
        toggler.setAttribute( "class", "col-md-12" );
        toggler.setAttribute( "onclick", "jQuery(this).next().stop().slideToggle();" );

        var togglerText = document.createTextNode( "Slide " + fieldNumber );
        toggler.appendChild( togglerText );

        var trash = document.createElement( "i" );
        trash.setAttribute( "class", "fa fa-trash red-text delete-the-feature pull-right" );
        trash.setAttribute( "name", name + "[delete_the_feature]" );
        toggler.appendChild( trash );

        var caret = document.createElement( "i" );
        caret.setAttribute( "class", "pull-right fa fa-caret-down" );
        toggler.appendChild( caret );

        // Container of input group
        var slider = document.createElement( "div" );
        slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
        slider.setAttribute( "class", "row" );

        var content_options = {
            name: name,
            fieldNumber: helper,
            slider: slider,
            cols: 12,

        }

        text_input( name, fieldNumber - ( 2 * helper ) + 2, slider, 12, 'Name ' + helper );
        content_input( content_options );

        var img_options = {
            id: id,
            name: name,
            fieldNumber: helper,
            slider: slider,
            cols: 12,
        }

        image_input( img_options );

        //get current first input in group added
        var offset = ( helper - 1 ) * 5;


        //add 2 in order to start button inputs (leave name for title)
        var num = offset + 2;


        for ( var i = 0; i < 4; i++ ) {

            //start counting to 4 button inputs

            var inputNumber = num + i;

            if ( inputNumber - offset == 2 || inputNumber - offset == 3 ) {
                //second and third in group are button text, next url
                text_input( name, inputNumber, slider, 6, 'Button text' );
            } else {
                text_input( name, inputNumber, slider, 6, 'Button URL' );
            }

        }

        // Append group inputs to result container
        result.append( toggler );
        result.append( slider );

        // Increase field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", helper );
    } );
}

function addImage() {
    jQuery( "body" ).on( 'click', "span[id*='add-image']", function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );
        //Full id is id (e.x. widget-mdb_team-2) + suffix (e.x. -fieldCount)
        var fullId = jQuery( this ).attr( "id" );
        var id = fullId.slice( fullId.indexOf( "widget" ), -1 * ( fullId.length - fullId.lastIndexOf( "-" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + fullName + "'] > div" ).length + 1;

        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );

        // Container of input group
        var slider = document.createElement( "div" );
        slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
        slider.setAttribute( "class", "col-md-4" );

        var img_options = {
            id: id + "-" + fieldNumber,
            name: name,
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }

        image_input( img_options ) //id+"-"+fieldNumber, name, fieldNumber, slider, 12

        var caption_heading_options = {
            name: name,
            field_name: "caption_heading",
            fieldNumber: fieldNumber,
            cols: 12,
            slider: slider,
            placeholder: "Caption heading",
        }
        text_input( caption_heading_options )
        
         var caption_options = {
            name: name,
            field_name: "caption",
            fieldNumber: fieldNumber,
            cols: 12,
            slider: slider,
            placeholder: "Caption ",
        }
        text_input( caption_options );



        // Append group inputs to result container
        result.append( slider );

        // Increase field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );
    } );
}

function addTab() {
    jQuery( "body" ).on( 'click', "span[id*='add-tab']", function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + fullName + "'] h4" ).length + 1;

        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );


        // Header which you can click and make container slide
        var toggler = document.createElement( "h4" );
        toggler.setAttribute( "id", "toggler" );
        toggler.setAttribute( "class", "col-md-12" );
        toggler.setAttribute( "onclick", "jQuery(this).next().stop().slideToggle();" );

        var togglerText = document.createTextNode( "Tab " + fieldNumber );
        toggler.appendChild( togglerText );

        var trash = document.createElement( "i" );
        trash.setAttribute( "class", "fa fa-trash red-text delete-the-feature pull-right" );
        trash.setAttribute( "name", name + "[delete_the_feature]" );
        toggler.appendChild( trash );


        var caret = document.createElement( "i" );
        caret.setAttribute( "class", "pull-right fa fa-caret-down" );
        toggler.appendChild( caret );


        // Container of input group
        var slider = document.createElement( "div" );
        slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
        slider.setAttribute( "class", "col-md-12" );
        slider.setAttribute( "style", "display:none;" );

        var name_options = {
            name: name,
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,

        }
        var content_options = {
            name: name,
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }
        var icon_options = {
            fieldNumber: fieldNumber,
            name: name,
            slider: slider,
            cols: 12,
        }
        var text_options = {
            name: name,
            field_name: "title",
            fieldNumber: fieldNumber,
            placeholder: "Title ",
            slider: slider,
            cols: 12,
        }

        text_input( text_options );
        icon_input( icon_options );
        text_input( name_options ); //name, fieldNumber, slider, 12
        content_input( content_options );


        // Append group inputs to result container
        result.append( toggler );
        result.append( slider );

        // Increase field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );
    } );
}

function addCollapsibleGroup() {
    jQuery( "body" ).on( 'click', "span[id*='add-group']", function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + fullName + "'] h4" ).length + 1;


        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );


        // Header which you can click and make container slide
        var toggler = document.createElement( "h4" );
        toggler.setAttribute( "id", "toggler" );
        toggler.setAttribute( "class", "col-md-12" );
        toggler.setAttribute( "onclick", "jQuery(this).next().stop().slideToggle();" );

        var togglerText = document.createTextNode( "Group " + fieldNumber );
        toggler.appendChild( togglerText );

        var trash = document.createElement( "i" );
        trash.setAttribute( "class", "fa fa-trash red-text delete-the-feature pull-right" );
        trash.setAttribute( "name", name + "[delete_the_feature]" );
        toggler.appendChild( trash );

        var caret = document.createElement( "i" );
        caret.setAttribute( "class", "pull-right fa fa-caret-down" );
        toggler.appendChild( caret );

        // Container of input group
        var slider = document.createElement( "div" );
        slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
        slider.setAttribute( "class", "col-md-12" );
        slider.setAttribute( "style", "display:none;" );

        var name_options = {
            name: name,
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }


        text_input( name_options ); //name, fieldNumber, slider, 12
        content_input( name_options );


        // Append group inputs to result container
        result.append( toggler );
        result.append( slider );

        // Increase field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );
    } );
}

function addCounter() {
    jQuery( "body" ).on( 'click', "span[id*='add-counter']", function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + fullName + "'] h4" ).length + 1;


        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );


        if ( fieldNumber <= 4 ) {

            // Header which you can click and make container slide
            var toggler = document.createElement( "h4" );
            toggler.setAttribute( "id", "toggler" );
            toggler.setAttribute( "class", "col-md-12" );
            toggler.setAttribute( "onclick", "jQuery(this).next().stop().slideToggle();" );

            var togglerText = document.createTextNode( "Counter " + fieldNumber );
            toggler.appendChild( togglerText );

            var trash = document.createElement( "i" );
            trash.setAttribute( "class", "fa fa-trash red-text delete-the-feature pull-right" );
            trash.setAttribute( "name", name + "[delete_the_feature]" );
            toggler.appendChild( trash );

            var caret = document.createElement( "i" );
            caret.setAttribute( "class", "pull-right fa fa-caret-down" );
            toggler.appendChild( caret );

            // Container of input group
            var slider = document.createElement( "div" );
            slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
            slider.setAttribute( "class", "col-md-12" );
            slider.setAttribute( "style", "display:none;" );

            var number_options = {
                name: name,
                field_name: 'size',
                fieldNumber: fieldNumber,
                slider: slider,
                cols: 12,
            }


            if ( jQuery( this ).attr( "data-version" ) == 2 ) {
                number_input( number_options );
            }

            var name_options = {
                name: name,
                fieldNumber: fieldNumber,
                slider: slider,
                cols: 12,
            }
            var number_options2 = {
                name: name,
                field_name: 'number',
                fieldNumber: fieldNumber,
                slider: slider,
                cols: 12,
            }
            var color_options = {
                name: name,
                fieldNumber: fieldNumber,
                slider: slider,
                cols: 12,
            }

            background_color_input( color_options );
            number_input( number_options2 );
            text_input( name_options );

            // Append group inputs to result container
            result.append( toggler );
            result.append( slider );

            // Increase field counter

            jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );
        }
    } );
}

function addCard() {
    jQuery( "body" ).on( 'click', "span[id*='add-pricing']", function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );
        var fullId = jQuery( this ).attr( "id" );
        var id = fullId.slice( fullId.indexOf( "widget" ), -1 * ( fullId.length - fullId.lastIndexOf( "-" ) - 1 ) );

        // Check how many groups of inputs you added

        var fieldNumber = jQuery( "[id='" + fullName + "'] h4" ).length + 1;


        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );




        // Header which you can click and make container slide
        var toggler = document.createElement( "h4" );
        toggler.setAttribute( "id", "toggler" );
        toggler.setAttribute( "class", "col-md-12" );
        toggler.setAttribute( "onclick", "jQuery(this).next().stop().slideToggle();" );

        var togglerText = document.createTextNode( "Card " + fieldNumber );
        toggler.appendChild( togglerText );

        var trash = document.createElement( "i" );
        trash.setAttribute( "class", "fa fa-trash red-text delete-the-feature pull-right" );
        trash.setAttribute( "name", name + "[delete_the_feature]" );
        toggler.appendChild( trash );

        var caret = document.createElement( "i" );
        caret.setAttribute( "class", "pull-right fa fa-caret-down" );
        toggler.appendChild( caret );

        // Container of input group
        var slider = document.createElement( "div" );
        slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
        slider.setAttribute( "class", "col-md-12" );
        slider.setAttribute( "style", "display:none;" );

        var title_options = {
            name: name,
            field_name: "pricing_title",
            fieldNumber: fieldNumber,
            placeholder: "Pricing title",
            slider: slider,
            cols: 12,
        }
        var price_options = {
            name: name,
            field_name: "price",
            placeholder: "Price",
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }
        var peroid_options = {
            name: name,
            field_name: "peroid",
            placeholder: "Peroid",
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }
        var button_options = {
            name: name,
            field_name: "button_text",
            placeholder: "Button text",
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 6,
        }
        var href_options = {
            name: name,
            field_name: "button_href",
            placeholder: "Button href",
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 6,
        }
        var color_options = {
            name: name,
            field_name: "background_color",
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }
        var icon_options = {
            fieldNumber: fieldNumber,
            name: name,
            slider: slider,
            cols: 12,
        }
        var img_options = {
            id: id,
            name: name,
            field_name: "background_image",
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }

        text_input( title_options );
        text_input( price_options );
        text_input( peroid_options );

        if ( jQuery( this ).attr( "data-version" ) == "1" ) {
            background_color_input( color_options ); //v1
        }
        if ( jQuery( this ).attr( "data-version" ) == "2" ) {
            image_input( img_options ); //v2
        }
        if ( jQuery( this ).attr( "data-version" ) == "3" && fieldNumber == "2" ) {
            image_input( img_options ); //v2
        }
        if ( jQuery( this ).attr( "data-version" ) < 4 ) {
            for ( var i = ( fieldNumber - 1 ) * 6 + 1; i <= ( fieldNumber - 1 ) * 6 + 6; i++ ) {
                var name_options = {
                    name: name,
                    field_name: "feature",
                    placeholder: "Feature",
                    fieldNumber: i,
                    slider: slider,
                    cols: 12,
                }
                text_input( name_options );
            }
        }
        if ( jQuery( this ).attr( "data-version" ) >= 4 ) {
            var text_options = {
                name: name,
                field_name: "pricing_text",
                fieldNumber: fieldNumber,
                slider: slider,
                cols: 12,
            }
            icon_input( icon_options );
            text_input( text_options );
        }

        text_input( button_options );
        text_input( href_options );
        // Append group inputs to result container
        result.append( toggler );
        result.append( slider );

        // Increase field counter

        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );
        //     var parent = jQuery(this).parent().parent().parent();
        //     var versionData = jQuery(parent).children('ul.nav-tabs').find('li.nav-item>a.active').attr('data-href');
        //     var index = versionData.slice(2)-1;
        // cardField(jQuery, index, this);
    } );

}

function addTeamMember() {
    jQuery( "body" ).on( "click", "span[id*=add-member]", function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );

        //Full id is id (e.x. widget-mdb_team-2) + suffix (e.x. -fieldCount)
        var fullId = jQuery( this ).attr( "id" );
        var id = fullId.slice( fullId.indexOf( "widget" ), -1 * ( fullId.length - fullId.lastIndexOf( "-" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + fullName + "'] h4" ).length + 1;

        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );


        // Header which you can click and make container slide
        var toggler = document.createElement( "h4" );
        toggler.setAttribute( "id", "toggler" );
        toggler.setAttribute( "class", "col-md-12" );
        toggler.setAttribute( "onclick", "jQuery(this).next().stop().slideToggle();" );

        var togglerText = document.createTextNode( "Member " + fieldNumber );
        toggler.appendChild( togglerText );

        var trash = document.createElement( "i" );
        trash.setAttribute( "class", "fa fa-trash red-text delete-the-feature pull-right" );
        trash.setAttribute( "name", name + "[delete_the_feature]" );
        toggler.appendChild( trash );

        var caret = document.createElement( "i" );
        caret.setAttribute( "class", "pull-right fa fa-caret-down" );
        toggler.appendChild( caret );

        // Container of input group
        var slider = document.createElement( "div" );
        slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
        slider.setAttribute( "class", "col-md-12" );
        slider.setAttribute( "style", "display:none;" );

        var name_options = {
            name: name,
            fieldNumber: fieldNumber,
            placeholder: "Name ",
            slider: slider,
            cols: 12,
        }
        var content_options = {
            name: name,
            fieldNumber: fieldNumber,
            placeholder: "Content ",
            slider: slider,
            cols: 12,
        }
        var avatar_options = { //id, name, fieldNumber, slider, cols
            id: id,
            name: name,
            field_name: "avatar",
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        } //image name job content

        var job_options = {
            name: name,
            field_name: "job",
            fieldNumber: fieldNumber,
            placeholder: "Profession",
            slider: slider,
            cols: 12,
        }

        var img_options = {
            id: id + '-'+ fieldNumber,
            name: name,
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }
        // Create fields depend on widget version
        if ( jQuery( this ).attr( "data-version" ) == '1' ) {
            image_input( img_options );
            text_input( name_options );
            text_input( job_options );
            content_input( content_options );

            for ( var i = ( fieldNumber - 1 ) * 3 + 1; i <= ( fieldNumber - 1 ) * 3 + 3; i++ ) {
                var icon_options = {
                    fieldNumber: i,
                    name: name,
                    slider: slider,
                    cols: 4,
                }
                icon_input( icon_options );
            }
        } else if(jQuery( this ).attr( "data-version" ) == '2'){
            image_input( img_options );
            text_input( name_options );
            text_input( job_options );

            for ( var i = ( fieldNumber - 1 ) * 3 + 1; i <= ( fieldNumber - 1 ) * 3 + 3; i++ ) {

                var icon_options = {
                    fieldNumber: i,
                    name: name,
                    slider: slider,
                    cols: 4,
                }
                icon_input( icon_options );
            }
            
        } else if ( jQuery( this ).attr( "data-version" ) == '7' || jQuery( this ).attr( "data-version" ) == '8' ) {
            image_input( img_options );
            text_input( name_options );
            text_input( job_options );
            content_input( content_options );

            for ( var i = ( fieldNumber - 1 ) * 3 + 1; i <= ( fieldNumber - 1 ) * 3 + 3; i++ ) {

                var icon_options = {
                    fieldNumber: i,
                    name: name,
                    slider: slider,
                    cols: 4,
                }
                icon_input( icon_options );
            }
        } else if ( jQuery( this ).attr( "data-version" ) == '3' || jQuery( this ).attr( "data-version" ) == '5' || jQuery( this ).attr( "data-version" ) == '9' || jQuery( this ).attr( "data-version" ) == '6' ) {
            image_input( img_options );
            text_input( name_options );
            text_input( job_options );
            content_input( content_options );

            for ( var i = ( fieldNumber - 1 ) * 3 + 1; i <= ( fieldNumber - 1 ) * 3 + 3; i++ ) {
                var icon_options = {
                    fieldNumber: i,
                    name: name,
                    slider: slider,
                    cols: 4,
                }
                icon_input( icon_options );
            }
        } else if ( jQuery( this ).attr( "data-version" ) == '4' ) {
            image_input( img_options );
            image_input( avatar_options ); //avatar_input
            text_input( name_options );
            text_input( job_options );
            content_input( content_options );

            for ( var i = ( fieldNumber - 1 ) * 4 + 1; i <= ( fieldNumber - 1 ) * 4 + 4; i++ ) {
                var icon_options1 = {
                    fieldNumber: i,
                    name: name,
                    slider: slider,
                    cols: 3,
                }

                icon_input( icon_options1 );
            }
        }


        // Append group inputs to result container
        result.append( toggler );
        result.append( slider );

        // Increase field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );

    } );
}

function addTestimonial() {
    jQuery( "body" ).on( "click", "span[id*=add-testimonial]", function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );

        //Full id is id (e.x. widget-mdb_team-2) + suffix (e.x. -fieldCount)
        var fullId = jQuery( this ).attr( "id" );
        var id = fullId.slice( fullId.indexOf( "widget" ), -1 * ( fullId.length - fullId.lastIndexOf( "-" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + fullName + "'] h4" ).length + 1;


        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );


        // Header which you can click and make container slide
        var toggler = document.createElement( "h4" );
        toggler.setAttribute( "id", "toggler" );
        toggler.setAttribute( "class", "col-md-12" );
        toggler.setAttribute( "onclick", "jQuery(this).next().stop().slideToggle();" );

        var togglerText = document.createTextNode( "Testimonial " + fieldNumber );
        toggler.appendChild( togglerText );

        var trash = document.createElement( "i" );
        trash.setAttribute( "class", "fa fa-trash red-text delete-the-feature pull-right" );
        trash.setAttribute( "name", name + "[delete_the_feature]" );
        toggler.appendChild( trash );

        var caret = document.createElement( "i" );
        caret.setAttribute( "class", "pull-right fa fa-caret-down" );
        toggler.appendChild( caret );

        // Container of input group
        var slider = document.createElement( "div" );
        slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
        slider.setAttribute( "style", "display:none;" );


        // Create slide. Each slide has three input groups
        if ( jQuery( this ).attr( "data-version" ) == 4 ) {
            for ( var i = ( fieldNumber - 1 ) * 3 + 1; i <= ( fieldNumber - 1 ) * 3 + 3; i++ ) {
                // Group container
                var setContainer = document.createElement( "div" );
                setContainer.setAttribute( "class", "col-md-4" );

                var img_options = {
                    id: id + "-" + i,
                    name: name,
                    fieldNumber: i,
                    slider: setContainer,
                    cols: 12,
                }
                var name_options = {
                    name: name,
                    fieldNumber: i,
                    slider: setContainer,
                    cols: 12,
                }
                var job_options = {
                    name: name,
                    field_name: "job",
                    fieldNumber: i,
                    slider: setContainer,
                    cols: 12,
                    placeholder: 'Profession',
                }

                var quote_options = {
                    name: name,
                    fieldNumber: i,
                    slider: setContainer,
                    placeholder: "Content ",
                    cols: 12,

                }
                var rate_options = {
                    id: id,
                    name: name,
                    fieldNumber: i,
                    slider: setContainer,
                    cols: 12
                }
                
                text_input( name_options );
                quote_input( quote_options );
                text_input( job_options ); //job
                rate_input( rate_options );
                image_input( img_options );
                // Append slide to slider
                slider.appendChild( setContainer )

                // Append group inputs to result container
                result.append( toggler );
                result.append( slider );
            }
        } else if ( jQuery( this ).attr( "data-version" ) == 1 ) {

            var setContainer = document.createElement( "div" );
            setContainer.setAttribute( "class", "col-md-6" );

            var quote_options = {
                name: name,
                fieldNumber: fieldNumber,
                placeholder: "Content ",
                slider: setContainer,
                cols: 12,
            }

            var color_options = {
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
            }

            var img_options = {
                id: id + "-" + i,
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
            }
            
            quote_input( quote_options );
            background_color_input( color_options );       
            image_input( img_options );


            // Append slide to slider
            slider.appendChild( setContainer )

            // Append group inputs to result container
            result.append( toggler );
            result.append( slider );
        } else if ( jQuery( this ).attr( "data-version" ) == 2 ) {

            var setContainer = document.createElement( "div" );
            setContainer.setAttribute( "class", "col-md-6" );

            var name_options = {
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
            }


            var quote_options = {
                name: name,
                fieldNumber: fieldNumber,
                placeholder: "Content ",
                slider: setContainer,
                cols: 12,
            }


            var img_options = {
                id: id + "-" + i,
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
            }

            var job_options = {
                name: name,
                field_name: "job",
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
                placeholder: 'Job Title',
            }


            var rate_options = {
                id: id,
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12
            }

            text_input( name_options );
            quote_input( quote_options );
            text_input( job_options );
            rate_input( rate_options );
            image_input( img_options );
             //job
            


            // Append slide to slider
            slider.appendChild( setContainer )

            // Append group inputs to result container
            result.append( toggler );
            result.append( slider );
        } else if ( jQuery( this ).attr( "data-version" ) == 3 ) {

            var setContainer = document.createElement( "div" );
            setContainer.setAttribute( "class", "col-md-6" );

            var name_options = {
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
            }


            var quote_options = {
                name: name,
                fieldNumber: fieldNumber,
                placeholder: "Content ",
                slider: setContainer,
                cols: 12,
            }


            var img_options = {
                id: id + "-" + i,
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
            }

            var job_options = {
                name: name,
                field_name: "job",
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
                placeholder: 'Job Title',
            }


            var rate_options = {
                id: id,
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12
            }

            text_input( name_options );
            quote_input( quote_options );
            text_input( job_options );
            rate_input( rate_options );        
            image_input( img_options );

            // Append slide to slider
            slider.appendChild( setContainer )

            // Append group inputs to result container
            result.append( toggler );
            result.append( slider );
        } else if ( jQuery( this ).attr( "data-version" ) == 5 ) {
           

            var setContainer = document.createElement( "div" );
            setContainer.setAttribute( "class", "col-md-6" );

            var name_options = {
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
            }


            var quote_options = {
                name: name,
                fieldNumber: fieldNumber,
                placeholder: "Content ",
                slider: setContainer,
                cols: 12,
            }


            var img_options = {
                id: id + "-" + i,
                name: name,
                fieldNumber: fieldNumber,
                slider: setContainer,
                cols: 12,
            }

       
             var background_img_options = {
                id: id,
                name: name,
                field_name: 'bg_image',
                fieldNumber: fieldNumber,
                button_name: "Select background image",
                slider: setContainer,
                cols: 12,
            }
            
                

            //id, name, fieldNumber, slider, cols
            text_input( name_options );
            quote_input( quote_options );   
            image_input( img_options ); 
            image_input( background_img_options ); 
            

            for(var i = ( fieldNumber - 1 ) * 3 + 1; i <= ( fieldNumber - 1 ) * 3 + 3; i++){
               
                var icon_options = {
                    fieldNumber: i,
                    name: name,
                    slider: slider,
                    cols: 12,
                }
               
                
                
              icon_input( icon_options );  
            }
          
            





            // Append slide to slider
            slider.appendChild( setContainer )

            // Append group inputs to result container
            result.append( toggler );
            result.append( slider );
        }
        // Increase field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );

    } );
}

function addFeature() {
    jQuery( "body" ).on( 'click', 'span[id*=\'add-feature\']', function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + fullName + "'] h4" ).length + 1;


        // Container the groups are added to
        var result = jQuery( "[id='" + fullName + "']" );


        // Header which you can click and make container slide
        var toggler = document.createElement( "h4" );
        toggler.setAttribute( "id", "toggler" );
        toggler.setAttribute( "class", "col-md-12" );
        toggler.setAttribute( "onclick", "jQuery(this).next().stop().slideToggle();" );

        var togglerText = document.createTextNode( "Feature " + fieldNumber );
        toggler.appendChild( togglerText );

        var trash = document.createElement( "i" );
        trash.setAttribute( "class", "fa fa-trash red-text delete-the-feature pull-right" );
        trash.setAttribute( "name", name + "[delete_the_feature]" );
        toggler.appendChild( trash );

        var caret = document.createElement( "i" );
        caret.setAttribute( "class", "pull-right fa fa-caret-down" );
        toggler.appendChild( caret );

        // Container of input group
        var slider = document.createElement( "div" );
        slider.setAttribute( "id", name + "[slider_" + fieldNumber + "]" );
        slider.setAttribute( "class", "col-md-12" );
        slider.setAttribute( "style", "display:none;" );

        var name_options = {
            name: name,
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }
        var link_url_options = {
            name: name,
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 6,
            field_name: "link_url",
        }
        var url_text_options = {
            name: name,
            field_name: "url_text",
            fieldNumber: fieldNumber,
            slider: slider,
            cols: 12,
        }
        var icon_options = {
            fieldNumber: fieldNumber,
            name: name,
            slider: slider,
            cols: 6,
        }

        // Create fields depend on widget version
        if ( jQuery( this ).attr( "data-version" ) == '2' ) {
            icon_input( icon_options );
            text_input( name_options );
            content_input( name_options );
            text_input( link_url_options );
            text_input( url_text_options ); // url text input
        } else {
            icon_input( icon_options );
            text_input( name_options );
            content_input( name_options );
        }


        // Append group inputs to result container
        result.append( toggler );
        result.append( slider );

        // Increase field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );
    } );
}

function deleteFeature() {
    jQuery( "body" ).on( 'click', 'span#delete-feature', function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );

        // Check how many groups of inputs you added
        if ( jQuery( "[id='" + fullName + "'] h4" ).length > 0 )
            var fieldNumber = jQuery( "[id='" + fullName + "'] h4" ).length - 1;
        else
            var fieldNumber = jQuery( "[id='" + fullName + "'] > div" ).length - 1;

        // Container of input group
        var slider = jQuery( "[id='" + fullName + "'] div[id*='slider']" ).last();
        // Header which you can click and make container slide
        var toggler = jQuery( "[id='" + fullName + "'] h4" ).last();


        // Delete whole input group
        slider.remove();
        toggler.remove();

        // Decrease field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber );
    } );
}

function deleteTheFeature() {
    jQuery( "body" ).on( 'click', 'i.delete-the-feature', function () {

        /* General variables */

        //Full name is name (e.x. widget-mdb_team[2]) + suffix (e.x. [fieldCount])
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );

        // Check how many groups of inputs you added
        var fieldNumber = jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value" );

        // Delete whole input group

        jQuery( this ).parent().next().remove();
        jQuery( this ).parent().remove();

        // Decrease field counter
        jQuery( "[id='" + name + "[fieldCount]']" ).attr( "value", fieldNumber - 1 );
    } );
}



/*
 * Allows user to switch image position (projects/v4)
 */
function setImagePosition() {

    jQuery( "body" ).on( 'click', '#image-to-the-left', function ( e ) {

        var leftOrRight = jQuery( this ).parent().parent().parent().find( "input[id$='-left_or_right']" );
        var activatedTabBtn = jQuery( this ).find( 'a' );
        var deactivatedTabBtn = jQuery( this ).siblings().find( 'a' );
        activatedTabBtn.attr( "class", "nav-link active" );
        deactivatedTabBtn.attr( "class", "nav-link" );
        leftOrRight.attr( 'value', 'left' );

    } );

    jQuery( "body" ).on( 'click', '#image-to-the-right', function ( e ) {

        var leftOrRight = jQuery( this ).parent().parent().parent().find( "input[id$='-left_or_right']" );
        var activatedTabBtn = jQuery( this ).find( 'a' );
        var deactivatedTabBtn = jQuery( this ).siblings().find( 'a' );
        activatedTabBtn.attr( "class", "nav-link active" );
        deactivatedTabBtn.attr( "class", "nav-link" );
        leftOrRight.attr( 'value', 'right' );

    } );

}

function get_extension( url ) {

    return url.substr( ( url.lastIndexOf( '.' ) + 1 ) );

}

/*
 * Chnages value of inputs in each tab of the widget to let user switch between versions without copy-pasting whole content to new version
 */
function widget_inputs() {
    jQuery( "body" ).on( "change", "[class*='title_text'], [type='number'], select, [type='text'], textarea", function () {
        var fullName = jQuery( this ).attr( "name" );
        var name = fullName.slice( 0, -1 * ( fullName.length - fullName.indexOf( "]" ) - 1 ) );

        jQuery( this ).closest( "form" ).find( "[name='" + fullName + "']" ).val( jQuery( this ).val() );
    } );
}

function togglerCaret() {
    jQuery( "body" ).on( "click", "h4#toggler", function () {

        if ( jQuery( "i", this ).attr( "class" ) == "pull-right fa fa-caret-down" )
            jQuery( "i", this ).attr( "class", "pull-right fa fa-caret-up" );
        else if ( jQuery( "i", this ).attr( "class" ) == "pull-right fa fa-caret-up" )
            jQuery( "i", this ).attr( "class", "pull-right fa fa-caret-down" );
    } );
}

//Call all functions
setImagePosition();
deleteFeature();
deleteTheFeature();
addFeature();
addTestimonial();
addTeamMember();
addCounter();
addCard()
addCollapsibleGroup();
addTab();
addSlide();
addImage();
fixSidebars();
widget_inputs();
togglerCaret();
addSocialIcon();
//});

var custom_uploader;

function image_button_click( dialog_title, button_text, library_type, preview_id, control_id ) {

    event.preventDefault();

    //If the uploader object has already been created, reopen the dialog
    //if (custom_uploader) {
    //   custom_uploader.open();
    //    return;
    //}

    //Extend the wp.media object
    custom_uploader = wp.media.frames.file_frame = wp.media( {
        title: dialog_title,
        button: {
            text: button_text
        },
        library: {
            type: library_type
        },
        multiple: false
    } );

    //When a file is selected, grab the URL and set it as the text field's value
    custom_uploader.on( 'select', function () {

        attachment = custom_uploader.state().get( 'selection' ).first().toJSON();
        jQuery( '[id=\'' + control_id + '\']' ).val( attachment.url );

        var html = '';

        if ( library_type == 'image' ) {
            html = '<img src="' + attachment.url + '" style=\'width: 100%;\'>';
        }

        if ( library_type == 'video' ) {
            html = '<video autoplay loop><source src="' + attachment.url + '" type="video/' + get_extension( attachment.url ) + '" /></video>';
        }

        jQuery( '#' + preview_id ).empty();
        jQuery( '#' + preview_id ).append( html );
    } );

    //Open the uploader dialog
    custom_uploader.open();

}
//## checkbox ##//
jQuery( document ).ready( function () {
    jQuery( "body" ).on( "change", "[type='checkbox']", function () {
        jQuery( this ).parent().find( "input[type='text'][data-role*='checked']" ).attr( "value", jQuery( this ).attr( "checked" ) );
        if ( !jQuery( this ).is( ":checked" ) ) {
            jQuery( this ).parent().find( "input[type='text'][data-role*='checked']" ).attr( "value", "" );
        }
    } )
} );
//## tooltip ##//
/* Widget previews */

jQuery( document ).ready( function () {
    jQuery( "body" ).find( "[id*='tooltip']" ).wrap( "<div class=''></div>" );

    jQuery( document ).on( "mouseenter", "[data-toggle='tooltip']", function () {

        var this_button = jQuery( this );

        var widget_preview = jQuery( this ).closest( "ul.nav.nav-tabs" ).find( "[id*='tooltip']" );
        var previews_path = widget_preview.find( "span" ).attr( "data-src" ) + "/previews/";

        widget_preview.find( "img" ).attr( "src", previews_path + jQuery( this ).attr( "data-prev" ) + '.jpg' )

        jQuery( "i", this ).css( "transform", "scale(1.3)" );

        jQuery( this ).closest( "ul.nav.nav-tabs" ).find( "[id*='tooltip']" ).removeClass( "big-preview" ).addClass( "small-preview" );
        jQuery( ".small-preview" ).css( {
            "top": this_button.position().top - 150 + "px",
            "left": this_button.position().left + "px",
        } );

    } );

    jQuery( document ).on( "mouseleave", "ul.nav.nav-tabs", function () {
        jQuery( "i", this ).css( "transform", "scale(1)" );
        jQuery( this ).find( "[id*='tooltip']" ).removeClass( "small-preview" );
    } );

    jQuery( document ).on( "click", ".small-preview", function () {
        jQuery( this ).parent().addClass( "flex" )
        jQuery( this ).removeClass( "small-preview" ).addClass( "big-preview" );
    } )

    jQuery( document ).on( "click", ".flex", function () {
        jQuery( "div", this ).first().removeClass( "big-preview" );
        jQuery( this ).removeClass( "flex" );
    } );
} );
//## filter ##//
jQuery( document ).ready( function ( $ ) {


    $( '.mdw-filter-submit' ).click( function () {

        var newFilter = [ ];

        $( this ).parent().find( 'input' ).each( function () {
            if ( $( this ).is( ':checked' ) )
                newFilter.push( $( this ).attr( 'data-val' ) );
        } );

        var thisQuery = $( this ).siblings( 'ul' ).attr( 'data-query' );

        var thisFilter = $( this ).siblings( 'ul' ).attr( 'data-filter' );

        var thisLink = $( this ).siblings( 'ul' ).attr( 'data-link' );

        var newQuery = thisLink + '?';

        if ( newFilter.length > 0 ) {

            newQuery += 'filter_' + thisFilter + '=' +
                newFilter.join();

            if ( thisQuery == 'or' ) {
                newQuery += '&query_type_' + thisFilter + '=or';
            }

            $( '.mdw-filter-ul' ).not( $( this ).siblings( 'ul' ) ).each( function () {

                if ( $( this ).attr( 'data-current-values' ) != '' ) {

                    var filter = $( this ).attr( 'data-filter' );

                    newQuery += '&filter_' + filter + '=' + $( this ).attr( 'data-current-values' );

                    var filterType = $( this ).attr( 'data-query' );

                    if ( filterType == 'or' ) {
                        newQuery += '&query_type_' + filter + '=or';
                    }

                }

            } );

        } else {

            $( '.mdw-filter-ul' ).not( $( this ).siblings( 'ul' ) ).each( function () {

                if ( $( this ).attr( 'data-current-values' ) != '' ) {

                    var filter = $( this ).attr( 'data-filter' );

                    newQuery += 'filter_' + filter + '=' + $( this ).attr( 'data-current-values' );

                    var filterType = $( this ).attr( 'data-query' );

                    if ( filterType == 'or' ) {
                        newQuery += '&query_type_' + filter + '=or';
                    }

                }

            } );

        }

        window.location.href = newQuery;

    } );


} )

jQuery( document ).ready( function ( $ ) {

    $( 'body' ).on( "click", ".versionTab", function () {
        var index = $( this ).parent().parent().children().children( 'a' ).index( this );
        let parent = $( this ).parent().parent().parent();
        if ( index > 2 ) {
            $( '.custom-panel-all-all', parent ).css( {
                'display': 'none'
            } );
        } else {
            $( '.custom-panel-all-all', parent ).css( {
                'display': 'block'
            } );
        }
        if ( index == 1 ) {
            $( '.url-link-display', parent ).css( {
                'display': 'block'
            } );
        } else {
            $( '.url-link-display', parent ).css( {
                'display': 'none'
            } );
        }

    } );

} );

// jQuery(document).ready(function($) {

//     $('body').on("click", ".versionTabPricing", function() {
//         var index = $(this).parent().parent().children().children('a').index(this);

//         cardField($, index, this);
//     });

// });

// function cardField($, index, self) {
//     

//     var parent = $(self).parent().parent().parent();
//     if(index >= 3) {
//         $('.title-for', parent).parent().css({'display': 'none' });
//         $('#icon_modal_toggle', parent).parent().parent().css({'display': 'block' });
//     }
//     else {
//         $('.title-for', parent).parent().css({'display':'block'});
//         $('#icon_modal_toggle', parent).parent().parent().css({'display': 'none' });
//     }
//     if (index == 1){
//         $('.background_image', parent).parent().css({'display': 'block' }); 
//     } else {
//         $('.background_image', parent).parent().css({'display': 'none' }); 
//     }
//     if (index == 0){
//         $('.color-for', parent).parent().css({'display': 'block' });
//     } else {
//         $('.color-for', parent).parent().css({'display': 'none' });
//     }
// }